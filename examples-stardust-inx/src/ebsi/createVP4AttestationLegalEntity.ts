// Copyright 2020-2022 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

import {
    Credential,
    ProofOptions,
    IotaDocument, IotaIdentityClient, IotaDID,
    Timestamp,
    Duration,
    Presentation
} from "@iota/identity-wasm/node/index.js";

import { dids } from "./dids";

import { Client } from "@iota/client-wasm/node/lib/index.js";

import { Converter } from "@iota/util.js";

import * as dotenv from "dotenv";
import * as dotenvExpand from "dotenv-expand";
const theEnv = dotenv.config();
dotenvExpand.expand(theEnv);

const { NODE_ENDPOINT, TOKEN } = process.env;

async function resolveDocument(didClient: IotaIdentityClient, did: string): Promise<IotaDocument> {
    const elements = did.split(":");
    const didResult = IotaDID.fromAliasId(elements[elements.length - 1], elements[elements.length - 2]);

    const resolvedDocument: IotaDocument = await didClient.resolveDid(didResult);
    console.error("Resolved DID document:", JSON.stringify(resolvedDocument, null, 2));

    return resolvedDocument;
}

async function run() {
    const client = new Client({
        primaryNode: {
            url: NODE_ENDPOINT,
            auth: { jwt:  TOKEN }
        },
        localPow: true,
    });
    const didClient = new IotaIdentityClient(client);

    const credentialStr = process.argv[2];
    if (!credentialStr) {
        console.error("Please provide a credential in JSON format");
        process.exit(-1);
    }

    const jsonCredential = JSON.parse(credentialStr);

    const holderDid = dids.recyclerTI.did;
    const holderPrivateKey = dids.recyclerTI.privateKeySign;

   const holderDocument = await resolveDocument(didClient, holderDid);

    // Create an unsigned `UniversityDegree` credential for Alice
    const signedVc = Credential.fromJSON(jsonCredential);

    const holderPrivateKeyBytes = Converter.hexToBytes(holderPrivateKey);

    // A unique random challenge generated by the requester per presentation can mitigate replay attacks.
    const challenge = "475a7984-1bb5-4c4c-a56f-822bccd46440";

    // The verifier and holder also agree that the signature should have an expiry date
    const expires = Timestamp.nowUTC().checkedAdd(Duration.days(1500));

    // Create a Verifiable Presentation from the Credential
    const unsignedVp = new Presentation({
        holder: holderDid,
        verifiableCredential: signedVc,
    });

    // Sign the verifiable presentation using the holder's verification method
    // and include the requested challenge and expiry timestamp.
    const signedVp = await holderDocument.signPresentation(
        unsignedVp,
        holderPrivateKeyBytes.slice(0, 32),
        "#sign-1",
        new ProofOptions({
            challenge: challenge,
            expires,
        }),
    );

    // ===========================================================================
    // Step 6: Holder sends a verifiable presentation to the verifier.
    // ===========================================================================

    // Convert the Verifiable Presentation to JSON to send it to the verifier.
    const signedVpJSON = signedVp.toJSON();

    // ====================================
    console.log(JSON.stringify(signedVpJSON));
}

export { };

run().then(() => console.error("Done")).catch(err => console.error(err));
