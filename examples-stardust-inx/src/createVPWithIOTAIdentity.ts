// Copyright 2020-2022 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

import {
    Credential,
    ProofOptions,
    IotaDocument, IotaIdentityClient, IotaDID,
    Timestamp,
    Duration,
    Presentation
} from "@iota/identity-wasm/node/index.js";

import { Client } from "@iota/client-wasm/node/lib/index.js";

import { Converter } from "@iota/util.js";
import { NODE_ENDPOINT, TOKEN } from "./endpoint";

async function resolveDocument(didClient: IotaIdentityClient, did: string): Promise<IotaDocument> {
    const elements = did.split(":");
    const didResult = IotaDID.fromAliasId(elements[elements.length - 1], elements[elements.length - 2]);

    const resolvedDocument: IotaDocument = await didClient.resolveDid(didResult);
    console.log("Resolved DID document:", JSON.stringify(resolvedDocument, null, 2));

    return resolvedDocument;
}

async function run() {
    const client = new Client({
        primaryNode: {
            url: NODE_ENDPOINT,
            auth: { jwt:  TOKEN }
        },
        localPow: true,
    });
    const didClient = new IotaIdentityClient(client);

    const issuerDid = "did:iota:ebsi:0x9244145be500bcc71c1d4d29c895ef06cff5eb6c055eebe23208206b223cdb72";
    const privateKey = "0x9d7d9c14f4aaa242ab0b6c3b05f7619b746367605f4d4e30586767de32021afb889ea932dd3f33674657c169859793f3f721be0a8c7122e696120c7bb2fc0adf";

    const holderDid = "did:iota:ebsi:0x58389b90eb77c8bf17940e44b4949d4c40b09d2bb5b75a18e57556ae61209c8b";
    const holderPrivateKey = "0x2b4ac273b3afe93f09918cdbff3a44bcefa35db5c9b6064c50ffdf8fc4987da7f022f892cfedbecda711071903145b9680e255226398e560d58ff80799792c4c";

   const issuerDocument = await resolveDocument(didClient, issuerDid);
   const holderDocument = await resolveDocument(didClient, holderDid);

    // Create a credential subject indicating the degree earned by Alice, linked to their DID.
    const subject = {
        id: holderDid,
        name: "Alice",
        degreeName: "Bachelor of Science and Arts",
        degreeType: "BachelorDegree",
        GPA: "4.0",
    };

    // Create an unsigned `UniversityDegree` credential for Alice
    const unsignedVc = new Credential({
        id: "https://example.edu/credentials/3732",
        type: "UniversityDegreeCredential",
        issuer: issuerDid,
        credentialSubject: subject,
    });

    const privateKeyBytes = Converter.hexToBytes(privateKey);
    const holderPrivateKeyBytes = Converter.hexToBytes(holderPrivateKey);

    // Sign Credential.
    let signedVc;

    try {
        signedVc = issuerDocument.signCredential(unsignedVc, privateKeyBytes.slice(0, 32), "#sign-1", ProofOptions.default());
    }
    catch (error) {
        console.error(error);
        return;
    }

    // The issuer is now sure that the credential they are about to issue satisfies their expectations.
    // The credential is then serialized to JSON and transmitted to the holder in a secure manner.
    // Note that the credential is NOT published to the IOTA Tangle. It is sent and stored off-chain.
    const credentialJSON = signedVc.toJSON();
    console.log("Issued credential: \n", JSON.stringify(credentialJSON, null, 2));

    // A unique random challenge generated by the requester per presentation can mitigate replay attacks.
    const challenge = "475a7984-1bb5-4c4c-a56f-822bccd46440";

    // The verifier and holder also agree that the signature should have an expiry date
    // 10 minutes from now.
    const expires = Timestamp.nowUTC().checkedAdd(Duration.minutes(240));

    // ===========================================================================
    // Step 5: Holder creates a verifiable presentation from the issued credential for the verifier to validate.
    // ===========================================================================

    // Deserialize the credential.
    const receivedVc = Credential.fromJSON(credentialJSON);

    // Create a Verifiable Presentation from the Credential
    const unsignedVp = new Presentation({
        holder: holderDid,
        verifiableCredential: receivedVc,
    });

    // Sign the verifiable presentation using the holder's verification method
    // and include the requested challenge and expiry timestamp.
    const signedVp = await holderDocument.signPresentation(
        unsignedVp,
        holderPrivateKeyBytes.slice(0, 32),
        "#sign-1",
        new ProofOptions({
            challenge: challenge,
            expires,
        }),
    );

    // ===========================================================================
    // Step 6: Holder sends a verifiable presentation to the verifier.
    // ===========================================================================

    // Convert the Verifiable Presentation to JSON to send it to the verifier.
    const signedVpJSON = signedVp.toJSON();

    // ====================================
    console.log("Issued presentation: \n", JSON.stringify(signedVpJSON, null, 2));
}

export { };

run().then(() => console.log("Done")).catch(err => console.error(err));
